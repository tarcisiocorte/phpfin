{"uri":"file:///home/tarcisio/dev/phpfin/vendor/zendframework/zend-diactoros/src/MessageTrait.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Zend\\Diactoros","location":[9,0,9,25]},{"kind":1,"name":"InvalidArgumentException","modifiers":4096,"location":[11,4,11,28],"associated":[{"kind":1,"name":"InvalidArgumentException"}]},{"kind":1,"name":"StreamInterface","modifiers":4096,"location":[12,4,12,36],"associated":[{"kind":1,"name":"Psr\\Http\\Message\\StreamInterface"}]},{"kind":4,"name":"Zend\\Diactoros\\MessageTrait","location":[19,0,450,1],"description":"Trait implementing the various methods defined in MessageInterface.","children":[{"kind":16,"name":"$headers","modifiers":2,"location":[26,14,26,27],"scope":"Zend\\Diactoros\\MessageTrait","type":"array"},{"kind":16,"name":"$headerNames","modifiers":2,"location":[33,14,33,31],"scope":"Zend\\Diactoros\\MessageTrait","type":"array"},{"kind":16,"name":"$protocol","modifiers":4,"location":[38,12,38,29],"scope":"Zend\\Diactoros\\MessageTrait","type":"string"},{"kind":16,"name":"$stream","modifiers":4,"location":[43,12,43,19],"scope":"Zend\\Diactoros\\MessageTrait","type":"Psr\\Http\\Message\\StreamInterface"},{"kind":32,"name":"getProtocolVersion","modifiers":1,"location":[52,4,55,5],"description":"Retrieves the HTTP protocol version as a string.\n\nThe string MUST contain only the HTTP version number (e.g., \"1.1\", \"1.0\").","scope":"Zend\\Diactoros\\MessageTrait","type":"string"},{"kind":32,"name":"withProtocolVersion","modifiers":1,"location":[70,4,76,5],"description":"Return an instance with the specified HTTP protocol version.\n\nThe version string MUST contain only the HTTP version number (e.g.,\n\"1.1\", \"1.0\").\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return an instance that has the\nnew protocol version.","scope":"Zend\\Diactoros\\MessageTrait","type":"","children":[{"kind":128,"name":"$version","location":[70,40,70,48],"description":"HTTP protocol version","scope":"withProtocolVersion","type":"string"}]},{"kind":32,"name":"getHeaders","modifiers":1,"location":[99,4,102,5],"description":"Retrieves all message headers.\n\nThe keys represent the header name as it will be sent over the wire, and\neach value is an array of strings associated with the header.\n\n// Represent the headers as a string\nforeach ($message->getHeaders() as $name => $values) {\necho $name . \": \" . implode(\", \", $values);\n}\n\n// Emit headers iteratively:\nforeach ($message->getHeaders() as $name => $values) {\nforeach ($values as $value) {\nheader(sprintf('%s: %s', $name, $value), false);\n}\n}","scope":"Zend\\Diactoros\\MessageTrait","type":"array"},{"kind":32,"name":"hasHeader","modifiers":1,"location":[112,4,115,5],"description":"Checks if a header exists by the given case-insensitive name.","scope":"Zend\\Diactoros\\MessageTrait","type":"bool","children":[{"kind":128,"name":"$header","location":[112,30,112,37],"description":"Case-insensitive header name.","scope":"hasHeader","type":"string"}]},{"kind":32,"name":"getHeader","modifiers":1,"location":[131,4,142,5],"description":"Retrieves a message header value by the given case-insensitive name.\n\nThis method returns an array of all the header values of the given\ncase-insensitive header name.\n\nIf the header does not appear in the message, this method MUST return an\nempty array.","scope":"Zend\\Diactoros\\MessageTrait","type":"string[]","children":[{"kind":128,"name":"$header","location":[131,30,131,37],"description":"Case-insensitive header field name.","scope":"getHeader","type":"string"}]},{"kind":32,"name":"getHeaderLine","modifiers":1,"location":[163,4,171,5],"description":"Retrieves a comma-separated string of the values for a single header.\n\nThis method returns all of the header values of the given\ncase-insensitive header name as a string concatenated together using\na comma.\n\nNOTE: Not all header values may be appropriately represented using\ncomma concatenation. For such headers, use getHeader() instead\nand supply your own delimiter when concatenating.\n\nIf the header does not appear in the message, this method MUST return\nan empty string.","scope":"Zend\\Diactoros\\MessageTrait","type":"string","children":[{"kind":128,"name":"$name","location":[163,34,163,39],"description":"Case-insensitive header field name.","scope":"getHeaderLine","type":"string"}]},{"kind":32,"name":"withHeader","modifiers":1,"location":[189,4,214,5],"description":"Return an instance with the provided header, replacing any existing\nvalues of any headers with the same case-insensitive name.\n\nWhile header names are case-insensitive, the casing of the header will\nbe preserved by this function, and returned from getHeaders().\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return an instance that has the\nnew and/or updated header and value.","scope":"Zend\\Diactoros\\MessageTrait","type":"","children":[{"kind":128,"name":"$header","location":[189,31,189,38],"description":"Case-insensitive header field name.","scope":"withHeader","type":"string"},{"kind":128,"name":"$value","location":[189,40,189,46],"description":"Header value(s).","scope":"withHeader","type":"string|string[]"}]},{"kind":32,"name":"withAddedHeader","modifiers":1,"location":[233,4,258,5],"description":"Return an instance with the specified header appended with the\ngiven value.\n\nExisting values for the specified header will be maintained. The new\nvalue(s) will be appended to the existing list. If the header did not\nexist previously, it will be added.\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return an instance that has the\nnew header and/or value.","scope":"Zend\\Diactoros\\MessageTrait","type":"","children":[{"kind":128,"name":"$header","location":[233,36,233,43],"description":"Case-insensitive header field name to add.","scope":"withAddedHeader","type":"string"},{"kind":128,"name":"$value","location":[233,45,233,51],"description":"Header value(s).","scope":"withAddedHeader","type":"string|string[]"}]},{"kind":32,"name":"withoutHeader","modifiers":1,"location":[272,4,284,5],"description":"Return an instance without the specified header.\n\nHeader resolution MUST be done without case-sensitivity.\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return an instance that removes\nthe named header.","scope":"Zend\\Diactoros\\MessageTrait","type":"","children":[{"kind":128,"name":"$header","location":[272,34,272,41],"description":"Case-insensitive header field name to remove.","scope":"withoutHeader","type":"string"}]},{"kind":32,"name":"getBody","modifiers":1,"location":[291,4,294,5],"description":"Gets the body of the message.","scope":"Zend\\Diactoros\\MessageTrait","type":"Psr\\Http\\Message\\StreamInterface"},{"kind":32,"name":"withBody","modifiers":1,"location":[309,4,314,5],"description":"Return an instance with the specified message body.\n\nThe body MUST be a StreamInterface object.\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return a new instance that has the\nnew body stream.","scope":"Zend\\Diactoros\\MessageTrait","type":"","children":[{"kind":128,"name":"$body","location":[309,29,309,50],"description":"Body.","scope":"withBody","typeSource":1,"type":"Psr\\Http\\Message\\StreamInterface"}]},{"kind":32,"name":"getStream","modifiers":4,"location":[316,4,331,5],"scope":"Zend\\Diactoros\\MessageTrait","children":[{"kind":128,"name":"$stream","location":[316,31,316,38],"scope":"getStream"},{"kind":128,"name":"$modeIfNotInstance","location":[316,40,316,58],"scope":"getStream"}]},{"kind":32,"name":"arrayContainsOnlyStrings","modifiers":4,"location":[339,4,342,5],"description":"Test that an array contains only strings","scope":"Zend\\Diactoros\\MessageTrait","type":"bool","children":[{"kind":128,"name":"$array","location":[339,46,339,58],"scope":"arrayContainsOnlyStrings","type":"array"}]},{"kind":32,"name":"filterHeaders","modifiers":4,"location":[352,4,390,5],"description":"Filter a set of headers to ensure they are in the correct internal format.\n\nUsed by message constructors to allow setting all initial headers at once.","scope":"Zend\\Diactoros\\MessageTrait","type":"array","children":[{"kind":128,"name":"$originalHeaders","location":[352,35,352,57],"description":"Headers to filter.","scope":"filterHeaders","type":"array"}]},{"kind":32,"name":"filterStringValue","modifiers":36,"location":[401,4,407,5],"description":"Test if a value is a string\n\nUsed with array_reduce.","scope":"Zend\\Diactoros\\MessageTrait","type":"bool","children":[{"kind":128,"name":"$carry","location":[401,46,401,52],"scope":"filterStringValue","type":"bool"},{"kind":128,"name":"$item","location":[401,54,401,59],"scope":"filterStringValue","type":"mixed"}]},{"kind":32,"name":"assertValidHeaderValue","modifiers":36,"location":[416,4,419,5],"description":"Assert that the provided header values are valid.","scope":"Zend\\Diactoros\\MessageTrait","children":[{"kind":128,"name":"$values","location":[416,51,416,64],"scope":"assertValidHeaderValue","type":"string[]"}]},{"kind":32,"name":"validateProtocolVersion","modifiers":4,"location":[427,4,449,5],"description":"Validate the HTTP protocol version","scope":"Zend\\Diactoros\\MessageTrait","children":[{"kind":128,"name":"$version","location":[427,45,427,53],"scope":"validateProtocolVersion","type":"string"}]}]}]}}