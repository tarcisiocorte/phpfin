{"uri":"file:///home/tarcisio/dev/phpfin/vendor/fzaninotto/faker/src/Faker/Provider/Base.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Faker\\Provider","location":[2,0,2,25]},{"kind":1,"name":"Generator","modifiers":4096,"location":[4,4,4,19],"associated":[{"kind":1,"name":"Faker\\Generator"}]},{"kind":1,"name":"DefaultGenerator","modifiers":4096,"location":[5,4,5,26],"associated":[{"kind":1,"name":"Faker\\DefaultGenerator"}]},{"kind":1,"name":"UniqueGenerator","modifiers":4096,"location":[6,4,6,25],"associated":[{"kind":1,"name":"Faker\\UniqueGenerator"}]},{"kind":1,"name":"ValidGenerator","modifiers":4096,"location":[7,4,7,24],"associated":[{"kind":1,"name":"Faker\\ValidGenerator"}]},{"kind":1,"name":"Faker\\Provider\\Base","location":[9,0,582,1],"children":[{"kind":16,"name":"$generator","modifiers":2,"location":[14,14,14,24],"scope":"Faker\\Provider\\Base","type":"Faker\\Generator"},{"kind":16,"name":"$unique","modifiers":2,"location":[19,14,19,21],"scope":"Faker\\Provider\\Base","type":"Faker\\UniqueGenerator"},{"kind":32,"name":"__construct","modifiers":1,"location":[24,4,27,5],"scope":"Faker\\Provider\\Base","children":[{"kind":128,"name":"$generator","location":[24,32,24,52],"scope":"__construct","typeSource":1,"type":"Faker\\Generator"}]},{"kind":32,"name":"randomDigit","modifiers":33,"location":[34,4,37,5],"description":"Returns a random number between 0 and 9","scope":"Faker\\Provider\\Base","type":"integer"},{"kind":32,"name":"randomDigitNotNull","modifiers":33,"location":[44,4,47,5],"description":"Returns a random number between 1 and 9","scope":"Faker\\Provider\\Base","type":"integer"},{"kind":32,"name":"randomDigitNot","modifiers":33,"location":[55,4,62,5],"description":"Generates a random digit, which cannot be $except","scope":"Faker\\Provider\\Base","type":"int","children":[{"kind":128,"name":"$except","location":[55,42,55,49],"scope":"randomDigitNot","type":"int"}]},{"kind":32,"name":"randomNumber","modifiers":33,"location":[75,4,92,5],"description":"Returns a random integer with 0 to $nbDigits digits.\n\nThe maximum value returned is mt_getrandmax()","scope":"Faker\\Provider\\Base","type":"integer","children":[{"kind":128,"name":"$nbDigits","location":[75,40,75,56],"description":"Defaults to a random number between 1 and 9","scope":"randomNumber","value":"null","type":"integer"},{"kind":128,"name":"$strict","location":[75,58,75,73],"description":"Whether the returned number should have exactly $nbDigits","scope":"randomNumber","value":"false","type":"boolean"}]},{"kind":32,"name":"randomFloat","modifiers":33,"location":[104,4,121,5],"description":"Return a random float number","scope":"Faker\\Provider\\Base","type":"float","children":[{"kind":128,"name":"$nbMaxDecimals","location":[104,39,104,60],"scope":"randomFloat","value":"null","type":"int"},{"kind":128,"name":"$min","location":[104,62,104,70],"scope":"randomFloat","value":"0","type":"int|float"},{"kind":128,"name":"$max","location":[104,72,104,83],"scope":"randomFloat","value":"null","type":"int|float"}]},{"kind":32,"name":"numberBetween","modifiers":33,"location":[132,4,137,5],"description":"Returns a random number between $int1 and $int2 (any order)","scope":"Faker\\Provider\\Base","type":"integer","children":[{"kind":128,"name":"$int1","location":[132,41,132,50],"description":"default to 0","scope":"numberBetween","value":"0","type":"integer"},{"kind":128,"name":"$int2","location":[132,52,132,70],"description":"defaults to 32 bit max integer, ie 2147483647","scope":"numberBetween","value":"2147483647","type":"integer"}]},{"kind":32,"name":"randomLetter","modifiers":33,"location":[144,4,147,5],"description":"Returns a random letter from a to z","scope":"Faker\\Provider\\Base","type":"string"},{"kind":32,"name":"randomAscii","modifiers":33,"location":[152,4,155,5],"description":"Returns a random ASCII character (excluding accents and special chars)","scope":"Faker\\Provider\\Base"},{"kind":32,"name":"randomElements","modifiers":33,"location":[166,4,191,5],"description":"Returns randomly ordered subsequence of $count elements from a provided array","scope":"Faker\\Provider\\Base","type":"array","children":[{"kind":128,"name":"$array","location":[166,42,166,77],"description":"Array to take elements from. Defaults to a-f","scope":"randomElements","value":"array('a', 'b', 'c')","type":"array"},{"kind":128,"name":"$count","location":[166,79,166,89],"description":"Number of elements to take.","scope":"randomElements","value":"1","type":"integer"}]},{"kind":32,"name":"randomElement","modifiers":33,"location":[199,4,207,5],"description":"Returns a random element from a passed array","scope":"Faker\\Provider\\Base","type":"mixed","children":[{"kind":128,"name":"$array","location":[199,41,199,70],"scope":"randomElement","value":"array('a', 'b', 'c')","type":"array"}]},{"kind":32,"name":"randomKey","modifiers":33,"location":[215,4,224,5],"description":"Returns a random key from a passed associative array","scope":"Faker\\Provider\\Base","type":"int|string|null","children":[{"kind":128,"name":"$array","location":[215,37,215,53],"scope":"randomKey","value":"array()","type":"array"}]},{"kind":32,"name":"shuffle","modifiers":33,"location":[240,4,249,5],"description":"Returns a shuffled version of the argument.\n\nThis function accepts either an array, or a string.","scope":"Faker\\Provider\\Base","type":"array|string","children":[{"kind":128,"name":"$arg","location":[240,35,240,44],"description":"The set to shuffle","scope":"shuffle","value":"''","type":"array|string"}]},{"kind":32,"name":"shuffleArray","modifiers":33,"location":[266,4,286,5],"description":"Returns a shuffled version of the array.\n\nThis function does not mutate the original array. It uses the\nFisher–Yates algorithm, which is unbiaised, together with a Mersenne\ntwister random generator. This function is therefore more random than\nPHP's shuffle() function, and it is seedable.","scope":"Faker\\Provider\\Base","type":"array","children":[{"kind":128,"name":"$array","location":[266,40,266,56],"description":"The set to shuffle","scope":"shuffleArray","value":"array()","type":"array"}]},{"kind":32,"name":"shuffleString","modifiers":33,"location":[305,4,318,5],"description":"Returns a shuffled version of the string.\n\nThis function does not mutate the original string. It uses the\nFisher–Yates algorithm, which is unbiaised, together with a Mersenne\ntwister random generator. This function is therefore more random than\nPHP's shuffle() function, and it is seedable. Additionally, it is\nUTF8 safe if the mb extension is available.","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[305,41,305,53],"description":"The set to shuffle","scope":"shuffleString","value":"''","type":"string"},{"kind":128,"name":"$encoding","location":[305,55,305,74],"description":"The string encoding (defaults to UTF-8)","scope":"shuffleString","value":"'UTF-8'","type":"string"}]},{"kind":32,"name":"replaceWildcard","modifiers":36,"location":[320,4,331,5],"scope":"Faker\\Provider\\Base","children":[{"kind":128,"name":"$string","location":[320,44,320,51],"scope":"replaceWildcard"},{"kind":128,"name":"$wildcard","location":[320,53,320,68],"scope":"replaceWildcard","value":"'#'"},{"kind":128,"name":"$callback","location":[320,70,320,103],"scope":"replaceWildcard","value":"'static::randomDigit'"}]},{"kind":32,"name":"numerify","modifiers":33,"location":[340,4,368,5],"description":"Replaces all hash sign ('#') occurrences with a random number\nReplaces all percentage sign ('%') occurrences with a not null number","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[340,36,340,51],"description":"String that needs to bet parsed","scope":"numerify","value":"'###'","type":"string"}]},{"kind":32,"name":"lexify","modifiers":33,"location":[376,4,379,5],"description":"Replaces all question mark ('?') occurrences with a random letter","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[376,34,376,50],"description":"String that needs to bet parsed","scope":"lexify","value":"'????'","type":"string"}]},{"kind":32,"name":"bothify","modifiers":33,"location":[388,4,394,5],"description":"Replaces hash signs ('#') and question marks ('?') with random numbers and letters\nAn asterisk ('*') is replaced with either a random number or a random letter","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[388,35,388,52],"description":"String that needs to bet parsed","scope":"bothify","value":"'## ??'","type":"string"}]},{"kind":32,"name":"asciify","modifiers":33,"location":[404,4,407,5],"description":"Replaces * signs with random numbers and letters and special characters","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[404,35,404,51],"description":"String that needs to bet parsed","scope":"asciify","value":"'****'","type":"string"}]},{"kind":32,"name":"regexify","modifiers":33,"location":[435,4,480,5],"description":"Transforms a basic regular expression into a random string satisfying the expression.","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$regex","location":[435,36,435,47],"description":"A regular expression (delimiters are optional)","scope":"regexify","value":"''","type":"string"}]},{"kind":32,"name":"toLower","modifiers":33,"location":[489,4,492,5],"description":"Converts string to lowercase.\nUses mb_string extension if available.","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[489,35,489,47],"description":"String that should be converted to lowercase","scope":"toLower","value":"''","type":"string"}]},{"kind":32,"name":"toUpper","modifiers":33,"location":[501,4,504,5],"description":"Converts string to uppercase.\nUses mb_string extension if available.","scope":"Faker\\Provider\\Base","type":"string","children":[{"kind":128,"name":"$string","location":[501,35,501,47],"description":"String that should be converted to uppercase","scope":"toUpper","value":"''","type":"string"}]},{"kind":32,"name":"optional","modifiers":1,"location":[515,4,529,5],"description":"Chainable method for making any formatter optional.","scope":"Faker\\Provider\\Base","type":"mixed|null","children":[{"kind":128,"name":"$weight","location":[515,29,515,42],"description":"Set the probability of receiving a null value.\n\"0\" will always return null, \"1\" will always return the generator.\nIf $weight is an integer value, then the same system works\nbetween 0 (always get false) and 100 (always get true).","scope":"optional","value":"0.5","type":"float|integer"},{"kind":128,"name":"$default","location":[515,44,515,59],"scope":"optional","value":"null"}]},{"kind":32,"name":"unique","modifiers":1,"location":[546,4,553,5],"description":"Chainable method for making any formatter unique.\n\n<code>\n// will never return twice the same value\n$faker->unique()->randomElement(array(1, 2, 3));\n</code>","scope":"Faker\\Provider\\Base","type":"Faker\\UniqueGenerator","children":[{"kind":128,"name":"$reset","location":[546,27,546,41],"description":"If set to true, resets the list of existing values","scope":"unique","value":"false","type":"boolean"},{"kind":128,"name":"$maxRetries","location":[546,43,546,62],"description":"Maximum number of retries to find a unique value,\nAfter which an OverflowException is thrown.","scope":"unique","value":"10000","type":"integer"}]},{"kind":32,"name":"valid","modifiers":1,"location":[578,4,581,5],"description":"Chainable method for forcing any formatter to return only valid values.\n\nThe value validity is determined by a function passed as first argument.\n\n<code>\n$values = array();\n$evenValidator = function ($digit) {\nreturn $digit % 2 === 0;\n};\nfor ($i=0; $i < 10; $i++) {\n$values []= $faker->valid($evenValidator)->randomDigit;\n}\nprint_r($values); // [0, 4, 8, 4, 2, 6, 0, 8, 8, 6]\n</code>","scope":"Faker\\Provider\\Base","type":"Faker\\ValidGenerator","children":[{"kind":128,"name":"$validator","location":[578,26,578,43],"description":"A function returning true for valid values","scope":"valid","value":"null","type":"Faker\\Provider\\Closure"},{"kind":128,"name":"$maxRetries","location":[578,45,578,64],"description":"Maximum number of retries to find a unique value,\nAfter which an OverflowException is thrown.","scope":"valid","value":"10000","type":"integer"}]}]}]}}