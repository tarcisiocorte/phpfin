{"uri":"file:///home/tarcisio/dev/phpfin/vendor/psr/http-message/src/UriInterface.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Psr\\Http\\Message","location":[1,0,1,27]},{"kind":2,"name":"Psr\\Http\\Message\\UriInterface","location":[23,0,322,1],"description":"Value object representing a URI.\n\nThis interface is meant to represent URIs according to RFC 3986 and to\nprovide methods for most common operations. Additional functionality for\nworking with URIs can be provided on top of the interface or externally.\nIts primary use is for HTTP requests, but may also be used in other\ncontexts.\n\nInstances of this interface are considered immutable; all methods that\nmight change state MUST be implemented such that they retain the internal\nstate of the current instance and return an instance that contains the\nchanged state.\n\nTypically the Host header will be also be present in the request message.\nFor server-side requests, the scheme will typically be discoverable in the\nserver parameters.","children":[{"kind":32,"name":"getScheme","modifiers":1,"location":[39,4,39,32],"description":"Retrieve the scheme component of the URI.\n\nIf no scheme is present, this method MUST return an empty string.\n\nThe value returned MUST be normalized to lowercase, per RFC 3986\nSection 3.1.\n\nThe trailing \":\" character is not part of the scheme and MUST NOT be\nadded.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"getAuthority","modifiers":1,"location":[59,4,59,35],"description":"Retrieve the authority component of the URI.\n\nIf no authority information is present, this method MUST return an empty\nstring.\n\nThe authority syntax of the URI is:\n\n<pre>\n[user-info@]host[:port]\n</pre>\n\nIf the port component is not set or is the standard port for the current\nscheme, it SHOULD NOT be included.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"getUserInfo","modifiers":1,"location":[76,4,76,34],"description":"Retrieve the user information component of the URI.\n\nIf no user information is present, this method MUST return an empty\nstring.\n\nIf a user is present in the URI, this will return that value;\nadditionally, if the password is also present, it will be appended to the\nuser value, with a colon (\":\") separating the values.\n\nThe trailing \"@\" character is not part of the user information and MUST\nNOT be added.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"getHost","modifiers":1,"location":[89,4,89,30],"description":"Retrieve the host component of the URI.\n\nIf no host is present, this method MUST return an empty string.\n\nThe value returned MUST be normalized to lowercase, per RFC 3986\nSection 3.2.2.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"getPort","modifiers":1,"location":[106,4,106,30],"description":"Retrieve the port component of the URI.\n\nIf a port is present, and it is non-standard for the current scheme,\nthis method MUST return it as an integer. If the port is the standard port\nused with the current scheme, this method SHOULD return null.\n\nIf no port is present, and no scheme is present, this method MUST return\na null value.\n\nIf no port is present, but a scheme is present, this method MAY return\nthe standard port for that scheme, but SHOULD return null.","scope":"Psr\\Http\\Message\\UriInterface","type":"null|int"},{"kind":32,"name":"getPath","modifiers":1,"location":[133,4,133,30],"description":"Retrieve the path component of the URI.\n\nThe path can either be empty or absolute (starting with a slash) or\nrootless (not starting with a slash). Implementations MUST support all\nthree syntaxes.\n\nNormally, the empty path \"\" and absolute path \"/\" are considered equal as\ndefined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\ndo this normalization because in contexts with a trimmed base path, e.g.\nthe front controller, this difference becomes significant. It's the task\nof the user to handle both \"\" and \"/\".\n\nThe value returned MUST be percent-encoded, but MUST NOT double-encode\nany characters. To determine what characters to encode, please refer to\nRFC 3986, Sections 2 and 3.3.\n\nAs an example, if the value should include a slash (\"/\") not intended as\ndelimiter between path segments, that value MUST be passed in encoded\nform (e.g., \"%2F\") to the instance.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"getQuery","modifiers":1,"location":[155,4,155,31],"description":"Retrieve the query string of the URI.\n\nIf no query string is present, this method MUST return an empty string.\n\nThe leading \"?\" character is not part of the query and MUST NOT be\nadded.\n\nThe value returned MUST be percent-encoded, but MUST NOT double-encode\nany characters. To determine what characters to encode, please refer to\nRFC 3986, Sections 2 and 3.4.\n\nAs an example, if a value in a key/value pair of the query string should\ninclude an ampersand (\"&\") not intended as a delimiter between values,\nthat value MUST be passed in encoded form (e.g., \"%26\") to the instance.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"getFragment","modifiers":1,"location":[173,4,173,34],"description":"Retrieve the fragment component of the URI.\n\nIf no fragment is present, this method MUST return an empty string.\n\nThe leading \"#\" character is not part of the fragment and MUST NOT be\nadded.\n\nThe value returned MUST be percent-encoded, but MUST NOT double-encode\nany characters. To determine what characters to encode, please refer to\nRFC 3986, Sections 2 and 3.5.","scope":"Psr\\Http\\Message\\UriInterface","type":"string"},{"kind":32,"name":"withScheme","modifiers":1,"location":[190,4,190,40],"description":"Return an instance with the specified scheme.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified scheme.\n\nImplementations MUST support the schemes \"http\" and \"https\" case\ninsensitively, and MAY accommodate other schemes if required.\n\nAn empty scheme is equivalent to removing the scheme.","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$scheme","location":[190,31,190,38],"description":"The scheme to use with the new instance.","scope":"withScheme","type":"string"}]},{"kind":32,"name":"withUserInfo","modifiers":1,"location":[206,4,206,58],"description":"Return an instance with the specified user information.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified user information.\n\nPassword is optional, but the user information MUST include the\nuser; an empty string for the user is equivalent to removing user\ninformation.","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$user","location":[206,33,206,38],"description":"The user name to use for authority.","scope":"withUserInfo","type":"string"},{"kind":128,"name":"$password","location":[206,40,206,56],"description":"The password associated with $user.","scope":"withUserInfo","value":"null","type":"null|string"}]},{"kind":32,"name":"withHost","modifiers":1,"location":[220,4,220,36],"description":"Return an instance with the specified host.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified host.\n\nAn empty host value is equivalent to removing the host.","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$host","location":[220,29,220,34],"description":"The hostname to use with the new instance.","scope":"withHost","type":"string"}]},{"kind":32,"name":"withPort","modifiers":1,"location":[239,4,239,36],"description":"Return an instance with the specified port.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified port.\n\nImplementations MUST raise an exception for ports outside the\nestablished TCP and UDP port ranges.\n\nA null value provided for the port is equivalent to removing the port\ninformation.","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$port","location":[239,29,239,34],"description":"The port to use with the new instance; a null value\nremoves the port information.","scope":"withPort","type":"null|int"}]},{"kind":32,"name":"withPath","modifiers":1,"location":[263,4,263,36],"description":"Return an instance with the specified path.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified path.\n\nThe path can either be empty or absolute (starting with a slash) or\nrootless (not starting with a slash). Implementations MUST support all\nthree syntaxes.\n\nIf the path is intended to be domain-relative rather than path relative then\nit must begin with a slash (\"/\"). Paths not starting with a slash (\"/\")\nare assumed to be relative to some base path known to the application or\nconsumer.\n\nUsers can provide both encoded and decoded path characters.\nImplementations ensure the correct encoding as outlined in getPath().","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$path","location":[263,29,263,34],"description":"The path to use with the new instance.","scope":"withPath","type":"string"}]},{"kind":32,"name":"withQuery","modifiers":1,"location":[280,4,280,38],"description":"Return an instance with the specified query string.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified query string.\n\nUsers can provide both encoded and decoded query characters.\nImplementations ensure the correct encoding as outlined in getQuery().\n\nAn empty query string value is equivalent to removing the query string.","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$query","location":[280,30,280,36],"description":"The query string to use with the new instance.","scope":"withQuery","type":"string"}]},{"kind":32,"name":"withFragment","modifiers":1,"location":[296,4,296,44],"description":"Return an instance with the specified URI fragment.\n\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified URI fragment.\n\nUsers can provide both encoded and decoded fragment characters.\nImplementations ensure the correct encoding as outlined in getFragment().\n\nAn empty fragment value is equivalent to removing the fragment.","scope":"Psr\\Http\\Message\\UriInterface","type":"","children":[{"kind":128,"name":"$fragment","location":[296,33,296,42],"description":"The fragment to use with the new instance.","scope":"withFragment","type":"string"}]},{"kind":32,"name":"__toString","modifiers":1,"location":[321,4,321,33],"description":"Return the string representation as a URI reference.\n\nDepending on which components of the URI are present, the resulting\nstring is either a full URI or relative reference according to RFC 3986,\nSection 4.1. The method concatenates the various components of the URI,\nusing the appropriate delimiters:\n\n- If a scheme is present, it MUST be suffixed by \":\".\n- If an authority is present, it MUST be prefixed by \"//\".\n- The path can be concatenated without delimiters. But there are two\ncases where the path has to be adjusted to make the URI reference\nvalid as PHP does not allow to throw an exception in __toString():\n- If the path is rootless and an authority is present, the path MUST\nbe prefixed by \"/\".\n- If the path is starting with more than one \"/\" and no authority is\npresent, the starting slashes MUST be reduced to one.\n- If a query is present, it MUST be prefixed by \"?\".\n- If a fragment is present, it MUST be prefixed by \"#\".","scope":"Psr\\Http\\Message\\UriInterface","type":"string"}]}]}}