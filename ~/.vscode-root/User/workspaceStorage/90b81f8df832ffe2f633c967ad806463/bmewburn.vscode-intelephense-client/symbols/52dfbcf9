{"uri":"file:///home/tarcisio/dev/phpfin/vendor/symfony/config/Definition/PrototypedArrayNode.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Symfony\\Component\\Config\\Definition","location":[11,0,11,46]},{"kind":1,"name":"InvalidConfigurationException","modifiers":4096,"location":[13,4,13,79],"associated":[{"kind":1,"name":"Symfony\\Component\\Config\\Definition\\Exception\\InvalidConfigurationException"}]},{"kind":1,"name":"DuplicateKeyException","modifiers":4096,"location":[14,4,14,71],"associated":[{"kind":1,"name":"Symfony\\Component\\Config\\Definition\\Exception\\DuplicateKeyException"}]},{"kind":1,"name":"UnsetKeyException","modifiers":4096,"location":[15,4,15,67],"associated":[{"kind":1,"name":"Symfony\\Component\\Config\\Definition\\Exception\\UnsetKeyException"}]},{"kind":1,"name":"Exception","modifiers":4096,"location":[16,4,16,59],"associated":[{"kind":1,"name":"Symfony\\Component\\Config\\Definition\\Exception\\Exception"}]},{"kind":1,"name":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","location":[23,0,388,1],"associated":[{"kind":1,"name":"Symfony\\Component\\Config\\Definition\\ArrayNode"}],"description":"Represents a prototyped Array node in the config tree.","children":[{"kind":16,"name":"$prototype","modifiers":2,"location":[25,14,25,24],"scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode"},{"kind":16,"name":"$keyAttribute","modifiers":2,"location":[26,14,26,27],"scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode"},{"kind":16,"name":"$removeKeyAttribute","modifiers":2,"location":[27,14,27,41],"scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode"},{"kind":16,"name":"$minNumberOfElements","modifiers":2,"location":[28,14,28,38],"scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode"},{"kind":16,"name":"$defaultValue","modifiers":2,"location":[29,14,29,37],"scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode"},{"kind":16,"name":"$defaultChildren","modifiers":2,"location":[30,14,30,30],"scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode"},{"kind":16,"name":"$valuePrototypes","modifiers":4,"location":[34,12,34,38],"description":"An array of the prototypes of the simplified value children","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"Symfony\\Component\\Config\\Definition\\NodeInterface[]"},{"kind":32,"name":"setMinNumberOfElements","modifiers":1,"location":[42,4,45,5],"description":"Sets the minimum number of elements that a prototype based node must\ncontain. By default this is zero, meaning no elements.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","children":[{"kind":128,"name":"$number","location":[42,43,42,50],"scope":"setMinNumberOfElements","type":"int"}]},{"kind":32,"name":"setKeyAttribute","modifiers":1,"location":[71,4,75,5],"description":"Sets the attribute which value is to be used as key.\n\nThis is useful when you have an indexed array that should be an\nassociative array. You can select an item from within the array\nto be the key of the particular item. For example, if \"id\" is the\n\"key\", then:\n\narray(\narray('id' => 'my_name', 'foo' => 'bar'),\n);\n\nbecomes\n\narray(\n'my_name' => array('foo' => 'bar'),\n);\n\nIf you'd like \"'id' => 'my_name'\" to still be present in the resulting\narray, then you can set the second argument of this method to false.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","children":[{"kind":128,"name":"$attribute","location":[71,36,71,46],"description":"The name of the attribute which value is to be used as a key","scope":"setKeyAttribute","type":"string"},{"kind":128,"name":"$remove","location":[71,48,71,62],"description":"Whether or not to remove the key","scope":"setKeyAttribute","value":"true","type":"bool"}]},{"kind":32,"name":"getKeyAttribute","modifiers":1,"location":[82,4,85,5],"description":"Retrieves the name of the attribute which value should be used as key.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"string"},{"kind":32,"name":"setDefaultValue","modifiers":1,"location":[94,4,101,5],"description":"Sets the default value of this node.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","children":[{"kind":128,"name":"$value","location":[94,36,94,42],"scope":"setDefaultValue","type":"string"}]},{"kind":32,"name":"hasDefaultValue","modifiers":1,"location":[108,4,111,5],"description":"Checks if the node has a default value.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"bool"},{"kind":32,"name":"setAddChildrenIfNoneSet","modifiers":1,"location":[118,4,125,5],"description":"Adds default children when none are set.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","children":[{"kind":128,"name":"$children","location":[118,44,118,73],"description":"The number of children|The child name|The children names to be added","scope":"setAddChildrenIfNoneSet","value":"array('defaults')","type":"int|string|array|null"}]},{"kind":32,"name":"getDefaultValue","modifiers":1,"location":[135,4,148,5],"description":"Retrieves the default value.\n\nThe default value could be either explicited or derived from the prototype\ndefault value.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"array"},{"kind":32,"name":"setPrototype","modifiers":1,"location":[155,4,158,5],"description":"Sets the node prototype.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","children":[{"kind":128,"name":"$node","location":[155,33,155,61],"scope":"setPrototype","typeSource":1,"type":"Symfony\\Component\\Config\\Definition\\PrototypeNodeInterface"}]},{"kind":32,"name":"getPrototype","modifiers":1,"location":[165,4,168,5],"description":"Retrieves the prototype.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"Symfony\\Component\\Config\\Definition\\PrototypeNodeInterface"},{"kind":32,"name":"addChild","modifiers":1,"location":[177,4,180,5],"description":"Disable adding concrete children for prototyped nodes.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","children":[{"kind":128,"name":"$node","location":[177,29,177,48],"description":"The child node to add\n","scope":"addChild","typeSource":1,"type":"Symfony\\Component\\Config\\Definition\\NodeInterface"}]},{"kind":32,"name":"finalizeValue","modifiers":2,"location":[192,4,217,5],"description":"Finalizes the value of this node.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"mixed","children":[{"kind":128,"name":"$value","location":[192,37,192,43],"scope":"finalizeValue","type":"mixed"}]},{"kind":32,"name":"normalizeValue","modifiers":2,"location":[229,4,289,5],"description":"Normalizes the value.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"mixed","children":[{"kind":128,"name":"$value","location":[229,38,229,44],"description":"The value to normalize\n","scope":"normalizeValue","type":"mixed"}]},{"kind":32,"name":"mergeValues","modifiers":2,"location":[302,4,343,5],"description":"Merges values together.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"mixed","children":[{"kind":128,"name":"$leftSide","location":[302,35,302,44],"description":"The left side to merge","scope":"mergeValues","type":"mixed"},{"kind":128,"name":"$rightSide","location":[302,46,302,56],"description":"The right side to merge\n","scope":"mergeValues","type":"mixed"}]},{"kind":32,"name":"getPrototypeForChild","modifiers":4,"location":[381,4,387,5],"description":"Returns a prototype for the child node that is associated to $key in the value array.\nFor general child nodes, this will be $this->prototype.\nBut if $this->removeKeyAttribute is true and there are only two keys in the child node:\none is same as this->keyAttribute and the other is 'value', then the prototype will be different.\n\nFor example, assume $this->keyAttribute is 'name' and the value array is as follows:\narray(\narray(\n'name' => 'name001',\n'value' => 'value001'\n)\n)\n\nNow, the key is 0 and the child node is:\narray(\n'name' => 'name001',\n'value' => 'value001'\n)\n\nWhen normalizing the value array, the 'name' element will removed from the child node\nand its value becomes the new key of the child node:\narray(\n'name001' => array('value' => 'value001')\n)\n\nNow only 'value' element is left in the child node which can be further simplified into a string:\narray('name001' => 'value001')\n\nNow, the key becomes 'name001' and the child node becomes 'value001' and\nthe prototype of child node 'name001' should be a ScalarNode instead of an ArrayNode instance.","scope":"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","type":"mixed","children":[{"kind":128,"name":"$key","location":[381,42,381,46],"description":"The key of the child node\n","scope":"getPrototypeForChild","type":"string"}]}]}]}}