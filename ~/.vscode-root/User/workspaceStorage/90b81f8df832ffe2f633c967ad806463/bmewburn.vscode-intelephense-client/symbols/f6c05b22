{"uri":"file:///home/tarcisio/dev/phpfin/vendor/zendframework/zend-diactoros/src/RequestTrait.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Zend\\Diactoros","location":[9,0,9,25]},{"kind":1,"name":"InvalidArgumentException","modifiers":4096,"location":[11,4,11,28],"associated":[{"kind":1,"name":"InvalidArgumentException"}]},{"kind":1,"name":"StreamInterface","modifiers":4096,"location":[12,4,12,36],"associated":[{"kind":1,"name":"Psr\\Http\\Message\\StreamInterface"}]},{"kind":1,"name":"UriInterface","modifiers":4096,"location":[13,4,13,33],"associated":[{"kind":1,"name":"Psr\\Http\\Message\\UriInterface"}]},{"kind":4,"name":"Zend\\Diactoros\\RequestTrait","location":[30,0,335,1],"description":"Trait with common request behaviors.\n\nServer and client-side requests differ slightly in how the Host header is\nhandled; on client-side, it should be calculated on-the-fly from the\ncomposed URI (if present), while on server-side, it will be calculated from\nthe environment. As such, this trait exists to provide the common code\nbetween both client-side and server-side requests, and each can then\nuse the headers functionality required by their implementations.","children":[{"kind":16,"name":"$headers","modifiers":256,"location":[15,0,29,3],"type":"array"},{"kind":16,"name":"$headerNames","modifiers":256,"location":[15,0,29,3],"type":"array"},{"kind":16,"name":"$stream","modifiers":256,"location":[15,0,29,3],"type":"Psr\\Http\\Message\\StreamInterface"},{"kind":32,"name":"hasHeader","modifiers":256,"location":[15,0,29,3],"type":"bool","children":[{"kind":128,"name":"$header","modifiers":256,"location":[15,0,29,3],"type":"string"}]},{"kind":16,"name":"$method","modifiers":4,"location":[35,12,35,24],"scope":"Zend\\Diactoros\\RequestTrait","type":"string"},{"kind":16,"name":"$requestTarget","modifiers":4,"location":[42,12,42,26],"scope":"Zend\\Diactoros\\RequestTrait","type":"null|string"},{"kind":16,"name":"$uri","modifiers":4,"location":[47,12,47,16],"scope":"Zend\\Diactoros\\RequestTrait","type":"Psr\\Http\\Message\\UriInterface"},{"kind":32,"name":"initialize","modifiers":4,"location":[60,4,78,5],"description":"Initialize request state.\n\nUsed by constructors.","scope":"Zend\\Diactoros\\RequestTrait","children":[{"kind":128,"name":"$uri","location":[60,32,60,43],"description":"URI for the request, if any.","scope":"initialize","value":"null","type":"null|string|Psr\\Http\\Message\\UriInterface"},{"kind":128,"name":"$method","location":[60,45,60,59],"description":"HTTP method for the request, if any.","scope":"initialize","value":"null","type":"null|string"},{"kind":128,"name":"$body","location":[60,61,60,83],"description":"Message body, if any.","scope":"initialize","value":"'php://memory'","type":"string|resource|Psr\\Http\\Message\\StreamInterface"},{"kind":128,"name":"$headers","location":[60,85,60,104],"description":"Headers for the message, if any.","scope":"initialize","value":"[]","type":"array"}]},{"kind":32,"name":"createUri","modifiers":4,"location":[96,4,110,5],"description":"Create and return a URI instance.\n\nIf `$uri` is a already a `UriInterface` instance, returns it.\n\nIf `$uri` is a string, passes it to the `Uri` constructor to return an\ninstance.\n\nIf `$uri is null, creates and returns an empty `Uri` instance.\n\nOtherwise, it raises an exception.","scope":"Zend\\Diactoros\\RequestTrait","type":"Psr\\Http\\Message\\UriInterface","children":[{"kind":128,"name":"$uri","location":[96,31,96,35],"scope":"createUri","type":"null|string|Psr\\Http\\Message\\UriInterface"}]},{"kind":32,"name":"getRequestTarget","modifiers":1,"location":[128,4,144,5],"description":"Retrieves the message's request target.\n\nRetrieves the message's request-target either as it will appear (for\nclients), as it appeared at request (for servers), or as it was\nspecified for the instance (see withRequestTarget()).\n\nIn most cases, this will be the origin-form of the composed URI,\nunless a value was provided to the concrete implementation (see\nwithRequestTarget() below).\n\nIf no URI is available, and no request-target has been specifically\nprovided, this method MUST return the string \"/\".","scope":"Zend\\Diactoros\\RequestTrait","type":"string"},{"kind":32,"name":"withRequestTarget","modifiers":1,"location":[164,4,175,5],"description":"Create a new instance with a specific request-target.\n\nIf the request needs a non-origin-form request-target — e.g., for\nspecifying an absolute-form, authority-form, or asterisk-form —\nthis method may be used to create an instance with the specified\nrequest-target, verbatim.\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return a new instance that has the\nchanged request target.","scope":"Zend\\Diactoros\\RequestTrait","type":"","children":[{"kind":128,"name":"$requestTarget","location":[164,38,164,52],"scope":"withRequestTarget","type":"mixed"}]},{"kind":32,"name":"getMethod","modifiers":1,"location":[182,4,185,5],"description":"Retrieves the HTTP method of the request.","scope":"Zend\\Diactoros\\RequestTrait","type":"string"},{"kind":32,"name":"withMethod","modifiers":1,"location":[202,4,208,5],"description":"Return an instance with the provided HTTP method.\n\nWhile HTTP method names are typically all uppercase characters, HTTP\nmethod names are case-sensitive and thus implementations SHOULD NOT\nmodify the given string.\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return an instance that has the\nchanged request method.","scope":"Zend\\Diactoros\\RequestTrait","type":"","children":[{"kind":128,"name":"$method","location":[202,31,202,38],"description":"Case-insensitive method.","scope":"withMethod","type":"string"}]},{"kind":32,"name":"getUri","modifiers":1,"location":[219,4,222,5],"description":"Retrieves the URI instance.\n\nThis method MUST return a UriInterface instance.","scope":"Zend\\Diactoros\\RequestTrait","type":"Psr\\Http\\Message\\UriInterface"},{"kind":32,"name":"withUri","modifiers":1,"location":[249,4,281,5],"description":"Returns an instance with the provided URI.\n\nThis method will update the Host header of the returned request by\ndefault if the URI contains a host component. If the URI does not\ncontain a host component, any pre-existing Host header will be carried\nover to the returned request.\n\nYou can opt-in to preserving the original state of the Host header by\nsetting `$preserveHost` to `true`. When `$preserveHost` is set to\n`true`, the returned request will not update the Host header of the\nreturned message -- even if the message contains no Host header. This\nmeans that a call to `getHeader('Host')` on the original request MUST\nequal the return value of a call to `getHeader('Host')` on the returned\nrequest.\n\nThis method MUST be implemented in such a way as to retain the\nimmutability of the message, and MUST return an instance that has the\nnew UriInterface instance.","scope":"Zend\\Diactoros\\RequestTrait","type":"","children":[{"kind":128,"name":"$uri","location":[249,28,249,45],"description":"New request URI to use.","scope":"withUri","typeSource":1,"type":"Psr\\Http\\Message\\UriInterface"},{"kind":128,"name":"$preserveHost","location":[249,47,249,68],"description":"Preserve the original state of the Host header.","scope":"withUri","value":"false","type":"bool"}]},{"kind":32,"name":"validateMethod","modifiers":4,"location":[289,4,308,5],"description":"Validate the HTTP method","scope":"Zend\\Diactoros\\RequestTrait","children":[{"kind":128,"name":"$method","location":[289,36,289,43],"scope":"validateMethod","type":"null|string"}]},{"kind":32,"name":"getHostFromUri","modifiers":4,"location":[315,4,320,5],"description":"Retrieve the host from the URI instance","scope":"Zend\\Diactoros\\RequestTrait","type":"string"},{"kind":32,"name":"assertHeaders","modifiers":4,"location":[328,4,334,5],"description":"Ensure header names and values are valid.","scope":"Zend\\Diactoros\\RequestTrait","children":[{"kind":128,"name":"$headers","location":[328,35,328,49],"scope":"assertHeaders","type":"array"}]}]}]}}